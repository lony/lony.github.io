<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Setup on [x]</title>
    <link>https://lony.github.io/tags/setup/index.xml</link>
    <description>Recent content in Setup on [x]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/lony&#34;&gt;Goetz Epperlein&lt;/a&gt; 2016</copyright>
    <atom:link href="https://lony.github.io/tags/setup/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mac OS X Setup</title>
      <link>https://lony.github.io/post/2016/mac-osx-setup/</link>
      <pubDate>Sat, 01 Oct 2016 18:02:52 +0200</pubDate>
      
      <guid>https://lony.github.io/post/2016/mac-osx-setup/</guid>
      <description>

&lt;p&gt;This post contains information about how I tweak a new Mac when I first get it. As things change I constantly update this post and adjust it. If you find a bug or want to recommend something, please feel free to open an &lt;a href=&#34;https://github.com/lony/lony.github.io/issues&#34;&gt;issue&lt;/a&gt; and help me get better. - Thank you!&lt;/p&gt;

&lt;h1 id=&#34;toc&#34;&gt;TOC&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#user-interface&#34;&gt;User interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#terminal&#34;&gt;Terminal&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#apps&#34;&gt;Apps&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#iterm2&#34;&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;user-interface&#34;&gt;User interface&lt;/h1&gt;

&lt;p&gt;Following the &lt;a href=&#34;http://www.defaults-write.com/10-terminal-commands-to-speed-up-your-mac-in-os-x-el-capitan/&#34;&gt;defaults-write.com instructions&lt;/a&gt; I first try to optimize the UX experience of OSX.&lt;/p&gt;

&lt;p&gt;To apply the following changes you have to reboot your machine. To undo use &lt;code&gt;defaults delete NSGlobalDomain KeyRepeat&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Disable animations when opening and closing windows: &lt;code&gt;defaults write NSGlobalDomain NSAutomaticWindowAnimationsEnabled -bool false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Disable animations when opening a Quick Look window: &lt;code&gt;defaults write -g QLPanelAnimationDuration -float 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Accelerated playback when adjusting the window size (Cocoa applications): &lt;code&gt;defaults write NSGlobalDomain NSWindowResizeTime -float 0.001&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Disable animation when opening the Info window in OS X Finder (cmdâŒ˜ + i): &lt;code&gt;defaults write com.apple.finder DisableAllAnimations -bool true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Disable animations when you open an application from the Dock: &lt;code&gt;defaults write com.apple.dock launchanim -bool false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make all animations faster that are used by Mission Control: &lt;code&gt;defaults write com.apple.dock expose-animation-duration -float 0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Disable the delay when you hide the Dock: &lt;code&gt;defaults write com.apple.Dock autohide-delay -float 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The keyboard react faster to keystrokes: &lt;code&gt;defaults write NSGlobalDomain KeyRepeat -int 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To change the screenshot format to jpg &lt;code&gt;defaults write com.apple.screencapture type jpg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After applying this configuration changes through the terminal there are also some adjustments made via the settings interface. I extracted two of them from the following &lt;a href=&#34;http://osxdaily.com/2014/10/24/speed-up-os-x-yosemite-mac/&#34;&gt;OSXDaily guide&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;System Preferences &amp;gt; Accessibility &amp;gt; Display and there check &lt;code&gt;Reduce Transparency&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;System Preferences &amp;gt; Dock select &lt;code&gt;Scale effect&lt;/code&gt; for Minimize windows using&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;terminal&#34;&gt;Terminal&lt;/h1&gt;

&lt;p&gt;To prepare for development I first install a couple of tools. As OS X has no package manager I first install - &lt;a href=&#34;http://brew.sh/index.html&#34;&gt;homebrew&lt;/a&gt; the (missing) package manager.&lt;/p&gt;

&lt;p&gt;After the package manager is working I use it to install a bunch of packages for ease of use, as development, as also preparation for incidents e.g. network analysis.&lt;/p&gt;

&lt;p&gt;I also set the stage for my &lt;a href=&#34;https://github.com/lony/dotFiles&#34;&gt;dotFiles&lt;/a&gt;, which need some perquisites to work. As there development is currently ongoing, the way to use them is described &lt;a href=&#34;https://github.com/lony/dotFiles/blob/master/README.md&#34;&gt;here&lt;/a&gt; only.&lt;/p&gt;

&lt;p&gt;The first thing my dotFiles need are GNU tools. As OS X is a BSD successor, the default tools are all from the BSD project and if you use Linux often, some things are different. The way to change that is stolen from &lt;a href=&#34;https://danielmiessler.com/blog/first-10-things-new-mac/&#34;&gt;this guide&lt;/a&gt;, and maybe a good read for you too!&lt;/p&gt;

&lt;p&gt;The following snipped let you dive into the details of the installation process. Enjoy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Install homebrew
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;

# Add GNU tap
brew tap homebrew/dupes     # GNU tap for brew

# Prepare array of cli packages
brew_packages=(
findutils --default-names   # GNU find, xargs, and locate
gnu-sed --default-names
gnu-tar --default-names
gnu-which --default-names
gnutls --default-names      # GNU TLS
openssl                     # SSL/TLS cryptography library
grep --default-names
coreutils                   # GNU File, Shell, and Text utilities
binutils                    # FSF Binutils for native development
diffutils                   # File comparison utilities

unrar
gzip
pigz                        # Parallel gzip
xz                          # General-purpose data compression with high compression ratio
p7zip                       # 7-Zip (high compression file archiver) implementation

bash
fish
vim
screen
tmux
z                           # Tracks most-used directories to make cd smarter
diff-so-fancy               # Good-lookin&#39; diffs with diff-highlight and more

nmap                        # Port scanning utility for large networks
netcat                      # Utility for managing network connections
ipcalc                      # Calculate various network masks
wget --with-iri             # Internet file retriever
curl
httpie                      # User-friendly cURL replacement (command-line HTTP client)
lynx                        # Text-based web browser

watch                       # Executes a program periodically, showing output fullscreen
htop                        # Improved top (interactive process viewer)
tree                        # Display directories as trees

gd                          # Graphics library to dynamically manipulate images
imagemagick                 # Tools and libraries to manipulate images in many formats
gs                          # Interpreter for PostScript and PDF

jq                          # Lightweight and flexible command-line JSON processor
pv                          # Monitor data&#39;s progress through a pipe

ansible
go

git
packer
utf8proc                    # Clean C library for processing UTF-8 Unicode data
docker-completion
docker-compose-completion
)

# Array of considered packages - NOT INSTALLED
brew_packages_consider=(
moreutils                   # Collection of tools that nobody wrote when UNIX was young
ack                         # Search tool like grep, but optimized for programmers
ag                          # Code-search similar to ack
rename
speedtest_cli
testssl
ssh-copy-id
vbindiff
webkit2png
grc
fasd
mc
pandoc
pwgen
git-extras

apache-spark
maven
scala
)

# Install cli packages
brew install &amp;quot;${brew_packages[@]}&amp;quot;

# Switch to zsh
chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The packages that I normally not install by default, but still like or want to look into are listed in the &lt;code&gt;brew_packages_consider&lt;/code&gt; array. For you they may be interesting, please feel free to also install them by default.&lt;/p&gt;

&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;

&lt;p&gt;If for any reason, you also need a running python installation on your Mac, this is how I install it following the &lt;a href=&#34;http://docs.python-guide.org/en/latest/starting/install/osx/&#34;&gt;Hitchhiker&amp;rsquo;s guide&lt;/a&gt;. This will setup a separate installation and should keep your existing python intact. Still everything you open a shell your newly installed python should be referenced.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install gcc&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Downloading the Command Line Tools from &lt;a href=&#34;https://developer.apple.com/downloads/&#34;&gt;here&lt;/a&gt; (requires Apple-Account). The file you need is called &lt;code&gt;Command_Line_Tools_OS_X_10.XX_for_Xcode_7.2.dmg&lt;/code&gt;. &lt;em&gt;The XX depends on your OSX-Version.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Then install the downloaded dmg&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Execute &lt;code&gt;brew install python&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;apps&#34;&gt;Apps&lt;/h1&gt;

&lt;p&gt;Having all the necessities for command line life at the pipe, now is the time for applications. Homebrew wouldn&amp;rsquo;t be THE missing package manager if it could not install also binary packages. Still, to do this there is another tap required - &lt;a href=&#34;https://caskroom.github.io/&#34;&gt;homebrew Cask&lt;/a&gt; a homebrew extension for GUI and binary applications.&lt;/p&gt;

&lt;p&gt;The following snipped - as before - installs all packages together. The comments should help me understand for what the package was and were to look if there are questions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Add cask tap
brew tap caskroom/cask

# Prepare array of cask packages
brew_cask_packages=(
anki
apache-directory-studio     # LDAP GUI http://directory.apache.org/studio
calibre                     # E-Book manager https://calibre-ebook.com
charles                     # HTTP proxy https://www.charlesproxy.com
docker
dropbox
fiddler
filezilla
firefox
flux                        # Reduce bright light https://justgetflux.com
franz
freemind
gimp
gmvault
google-chrome
google-drive
iterm2                      # A better Terminal https://www.iterm2.com
java
keepassx
mysqlworkbench
netbeans
osxfuse
pencil
postico
postman
rescuetime
sequel-pro
sourcetree
spectacle                   # Resize OS X windows https://www.spectacleapp.com
sublime-text
teamviewer
tomighty
unetbootin
vagrant
vagrant-bar
vagrant-manager
virtualbox
virtualbox-extension-pack
visual-studio-code
wireshark
xmind
)

# Array of considered packages - NOT INSTALLED
brew_cask_packages_consider=(
freecad
karabiner
kitematic               # Docker search https://kitematic.com
mongodb-compass         # Mongo GUI https://www.mongodb.com/products/compass
mono-mdk                # Mono SDK
skype
slack
soundflower             # Virtual audio output device https://rogueamoeba.com/freebies/soundflower/
vimr
keka                    # Archiver GUI for p7zip http://www.kekaosx.com
nvalt                   # Note taking app http://brettterpstra.com/projects/nvalt
tagspaces               # Evernote alternative https://www.tagspaces.org
vlc
anaconda                # Python data science environment https://www.continuum.io
)

# Install cask packages
brew cask install &amp;quot;${brew_cask_packages[@]}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should have not only cli tools installed but also all your favorite binary tools running. Some more bare then others, but still its close to done!&lt;/p&gt;

&lt;h2 id=&#34;iterm2&#34;&gt;iTerm2&lt;/h2&gt;

&lt;p&gt;To make your favorite terminal emulator a bit more fantastic as it already is, you can adjust the following settings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To let iTerm2 fill the complete screen after a resize: Turn on &lt;code&gt;Preferences&amp;gt; Advanced&amp;gt; Terminal windows resize smoothly&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Now that you read that far - thank you and please remember, if you find a bug or want to recommend something, please feel free to open an &lt;a href=&#34;https://github.com/lony/lony.github.io/issues&#34;&gt;issue&lt;/a&gt; and help me get better!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>